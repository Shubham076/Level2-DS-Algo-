/*leetcode 934

dsu
O(N * N) as the given graph is adjacency matrix
*/
import java.util.*;
class minimizeMalwareinfection {
	static int[] par;
	static int[] size; //for storing the size of connected component
	static int find(int n) {
		if (par[n] == n) {
			return n;
		}
		int temp = find(par[n]);
		par[n] = temp;
		return temp;
	}


	public static int size(int x) {
		return size[find(x)];
	}

	public static void union(int x, int y) {
		int lx = find(x);
		int ly = find(y);
		if (lx != ly) {
			if (size[lx] > size[ly]) {
				par[ly] = lx;
				size[lx] += size[ly];
			}
			else if (size[ly] >= size[lx]) {
				par[lx] = ly;
				size[ly] += size[lx];
			}
		}
	}
	public static int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		HashMap<Integer, Integer> map = new HashMap<>(); //leader vs cnt of infected node
		par = new int[n];
		size = new int[n];
		for (int i = 0; i < n; i++) {
			par[i] = i;
			size[i] = 1;
		}
		int ans = -1;
		int cnt = 0;

		//o(N*N)
		for (int i = 0; i < n; ++i)
			for (int j = i + 1; j < n; ++j)
				if (graph[i][j] == 1)
					union(i, j);


		for (int i : initial) {
			int x = find(i);
			map.put(x, map.getOrDefault(x, 0) + 1);
		}

		for (int i : initial) {
			int x = find(i);
			int v = map.get(x);
			if (v > 1) {
				continue;
			} else {
				int s = size(i);
				if (s > cnt || s == cnt && i < ans) {
					cnt = s;
					ans = i;
				}
			}
		}

		if (ans == -1) {
			ans = Integer.MAX_VALUE;
			for (int node : initial)
				ans = Math.min(ans, node);
		}
		return ans;
	}
	public static void main(String[] args) {
		int[][] graph = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
		int[] initial = {0, 1, 2};
		System.out.println(minMalwareSpread(graph, initial));
	}
}